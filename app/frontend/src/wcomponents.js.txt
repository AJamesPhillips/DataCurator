const { v4: uuid_v4 } = require("uuid")


const wcomponents = [
    "{\"id\":\"wc53333\",...}",
    // ...
]


const ids_map_new_to_old = {}
const wcomponent_ids = wcomponents.map((wc_str, index) =>
{
    const wc = JSON.parse(wc_str)
    const old_id = wc.id
    const new_id = uuid_v4()
    ids_map_new_to_old[new_id] = old_id

    return { old_id, new_id }
})
// we have some old ids like wc1, wc2 etc which are causing problems if used first
.sort((a, b) => a.old_id.length > b.old_id.length ? -1 : 1)

if (wcomponent_ids.find(wc => !wc.old_id)) throw new Error(`Found wcomponent with no id`)


wcomponent_ids.forEach(ids =>
{
    const regexp = new RegExp(ids.old_id, "g")

    wcomponents.forEach((wc_str, index) =>
    {
        const new_wc_str = wc_str.replace(regexp, ids.new_id)
        wcomponents[index] = new_wc_str
    })
})


wcomponents.forEach((wc_str, index) =>
{
    const wc = JSON.parse(wc_str)
    const new_id = wc.id
    const old_id = ids_map_new_to_old[new_id]

    const new_description = (wc.description || "") + `\n\n(Old id: ${old_id})`
    const new_wc = { ...wc, description: new_description }
    const new_wc_str = JSON.stringify(new_wc)

    wcomponents[index] = new_wc_str
})


console.log(JSON.stringify(wcomponent_ids))
console.log("\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
console.log(wcomponents.join(",\n"))
// console.log(wcomponents.map(wc_str => JSON.parse(wc_str).id).join(",\n"))
// console.log(wcomponent_ids.map(ids => `${ids.old_id} -> ${ids.new_id}`).join("\n"))

